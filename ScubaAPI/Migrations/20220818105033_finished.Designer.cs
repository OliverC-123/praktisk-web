// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScubaAPI.Models;

#nullable disable

namespace ScubaAPI.Migrations
{
    [DbContext(typeof(StedContext))]
    [Migration("20220818105033_finished")]
    partial class finished
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("ScubaAPI.Models.IMG", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cover")
                        .HasColumnType("TEXT");

                    b.Property<string>("Default")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<int>("StedID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StedID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ScubaAPI.Models.Kontakt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kontakt");
                });

            modelBuilder.Entity("ScubaAPI.Models.Sted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dybde")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Lon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeID");

                    b.ToTable("Steder");
                });

            modelBuilder.Entity("ScubaAPI.Models.Tilmeld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hojde")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tlfnr")
                        .HasColumnType("TEXT");

                    b.Property<int>("TurID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Vaegt")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TurID");

                    b.ToTable("Signup");
                });

            modelBuilder.Entity("ScubaAPI.Models.Tur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dato")
                        .HasColumnType("TEXT");

                    b.Property<string>("Navn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pladser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pris")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rabat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StedID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tilmeldte")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StedID");

                    b.ToTable("Turer");
                });

            modelBuilder.Entity("ScubaAPI.Models.Type", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DykType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("ScubaAPI.Models.IMG", b =>
                {
                    b.HasOne("ScubaAPI.Models.Sted", "Sted")
                        .WithMany()
                        .HasForeignKey("StedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sted");
                });

            modelBuilder.Entity("ScubaAPI.Models.Sted", b =>
                {
                    b.HasOne("ScubaAPI.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ScubaAPI.Models.Tilmeld", b =>
                {
                    b.HasOne("ScubaAPI.Models.Tur", "Tur")
                        .WithMany()
                        .HasForeignKey("TurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tur");
                });

            modelBuilder.Entity("ScubaAPI.Models.Tur", b =>
                {
                    b.HasOne("ScubaAPI.Models.Sted", "Sted")
                        .WithMany()
                        .HasForeignKey("StedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sted");
                });
#pragma warning restore 612, 618
        }
    }
}
